// AUTO-GENERATED

#ifndef _GI_HARFBUZZ__CONSTANTS_HPP_
#define _GI_HARFBUZZ__CONSTANTS_HPP_

namespace gi {

namespace repository {

namespace HarfBuzz {

const gint AAT_LAYOUT_NO_SELECTOR_INDEX_ = HB_AAT_LAYOUT_NO_SELECTOR_INDEX;

const gint BUFFER_REPLACEMENT_CODEPOINT_DEFAULT_ = HB_BUFFER_REPLACEMENT_CODEPOINT_DEFAULT;

const gint FEATURE_GLOBAL_START_ = HB_FEATURE_GLOBAL_START;

// SKIP constant LANGUAGE_INVALID; constant type  not supported

const hb_codepoint_t MAP_VALUE_INVALID_ = HB_MAP_VALUE_INVALID;

const gint OT_LAYOUT_DEFAULT_LANGUAGE_INDEX_ = HB_OT_LAYOUT_DEFAULT_LANGUAGE_INDEX;

const gint OT_LAYOUT_NO_FEATURE_INDEX_ = HB_OT_LAYOUT_NO_FEATURE_INDEX;

const gint OT_LAYOUT_NO_SCRIPT_INDEX_ = HB_OT_LAYOUT_NO_SCRIPT_INDEX;

const gint OT_LAYOUT_NO_VARIATIONS_INDEX_ = HB_OT_LAYOUT_NO_VARIATIONS_INDEX;

const gint OT_MAX_TAGS_PER_LANGUAGE_ = HB_OT_MAX_TAGS_PER_LANGUAGE;

const gint OT_MAX_TAGS_PER_SCRIPT_ = HB_OT_MAX_TAGS_PER_SCRIPT;

const hb_codepoint_t SET_VALUE_INVALID_ = HB_SET_VALUE_INVALID;

const gint UNICODE_MAX_ = HB_UNICODE_MAX;

const gint VERSION_MAJOR_ = HB_VERSION_MAJOR;

const gint VERSION_MICRO_ = HB_VERSION_MICRO;

const gint VERSION_MINOR_ = HB_VERSION_MINOR;

const gchar VERSION_STRING_[] = HB_VERSION_STRING;

} // namespace HarfBuzz

} // namespace repository

} // namespace gi

#endif
